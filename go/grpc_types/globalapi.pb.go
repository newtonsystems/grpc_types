// Code generated by protoc-gen-go. DO NOT EDIT.
// source: globalapi.proto

package grpc_types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GlobalAPI service

type GlobalAPIClient interface {
	// All API calls from all services
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SayWorld(ctx context.Context, in *WorldRequest, opts ...grpc.CallOption) (*WorldResponse, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	GetAvailableAgents(ctx context.Context, in *GetAvailableAgentsRequest, opts ...grpc.CallOption) (*GetAvailableAgentsResponse, error)
	GetAgentIDFromRef(ctx context.Context, in *GetAgentIDFromRefRequest, opts ...grpc.CallOption) (*GetAgentIDFromRefResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	AcceptCall(ctx context.Context, in *AcceptCallRequest, opts ...grpc.CallOption) (*AcceptCallResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type globalAPIClient struct {
	cc *grpc.ClientConn
}

func NewGlobalAPIClient(cc *grpc.ClientConn) GlobalAPIClient {
	return &globalAPIClient{cc}
}

func (c *globalAPIClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/sayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SayWorld(ctx context.Context, in *WorldRequest, opts ...grpc.CallOption) (*WorldResponse, error) {
	out := new(WorldResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/sayWorld", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/AddTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAvailableAgents(ctx context.Context, in *GetAvailableAgentsRequest, opts ...grpc.CallOption) (*GetAvailableAgentsResponse, error) {
	out := new(GetAvailableAgentsResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/GetAvailableAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAgentIDFromRef(ctx context.Context, in *GetAgentIDFromRefRequest, opts ...grpc.CallOption) (*GetAgentIDFromRefResponse, error) {
	out := new(GetAgentIDFromRefResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/GetAgentIDFromRef", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) AcceptCall(ctx context.Context, in *AcceptCallRequest, opts ...grpc.CallOption) (*AcceptCallResponse, error) {
	out := new(AcceptCallResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/AcceptCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/grpc_types.GlobalAPI/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GlobalAPI service

type GlobalAPIServer interface {
	// All API calls from all services
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayWorld(context.Context, *WorldRequest) (*WorldResponse, error)
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	GetAvailableAgents(context.Context, *GetAvailableAgentsRequest) (*GetAvailableAgentsResponse, error)
	GetAgentIDFromRef(context.Context, *GetAgentIDFromRefRequest) (*GetAgentIDFromRefResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	AcceptCall(context.Context, *AcceptCallRequest) (*AcceptCallResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterGlobalAPIServer(s *grpc.Server, srv GlobalAPIServer) {
	s.RegisterService(&_GlobalAPI_serviceDesc, srv)
}

func _GlobalAPI_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SayWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SayWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/SayWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SayWorld(ctx, req.(*WorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAvailableAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAvailableAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/GetAvailableAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAvailableAgents(ctx, req.(*GetAvailableAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAgentIDFromRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentIDFromRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAgentIDFromRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/GetAgentIDFromRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAgentIDFromRef(ctx, req.(*GetAgentIDFromRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_AcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).AcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/AcceptCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).AcceptCall(ctx, req.(*AcceptCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_types.GlobalAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GlobalAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_types.GlobalAPI",
	HandlerType: (*GlobalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sayHello",
			Handler:    _GlobalAPI_SayHello_Handler,
		},
		{
			MethodName: "sayWorld",
			Handler:    _GlobalAPI_SayWorld_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _GlobalAPI_AddTask_Handler,
		},
		{
			MethodName: "GetAvailableAgents",
			Handler:    _GlobalAPI_GetAvailableAgents_Handler,
		},
		{
			MethodName: "GetAgentIDFromRef",
			Handler:    _GlobalAPI_GetAgentIDFromRef_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _GlobalAPI_HeartBeat_Handler,
		},
		{
			MethodName: "AcceptCall",
			Handler:    _GlobalAPI_AcceptCall_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GlobalAPI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "globalapi.proto",
}

func init() { proto.RegisterFile("globalapi.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbf, 0x4f, 0xf3, 0x30,
	0x10, 0x86, 0xbf, 0xa1, 0xfa, 0xa0, 0xd7, 0xa1, 0xc2, 0x0b, 0x25, 0xfc, 0x18, 0x10, 0x65, 0xec,
	0x00, 0x23, 0x93, 0xa1, 0xa2, 0x2d, 0x12, 0x52, 0x55, 0x21, 0x31, 0x22, 0x27, 0x39, 0x4c, 0x84,
	0x13, 0x9b, 0xd8, 0x80, 0xfa, 0xaf, 0x33, 0x21, 0xa7, 0xb6, 0x9b, 0xd0, 0x54, 0xdd, 0x92, 0xf7,
	0x79, 0xef, 0x39, 0xe9, 0x64, 0xe8, 0x73, 0x21, 0x63, 0x26, 0x98, 0xca, 0x46, 0xaa, 0x94, 0x46,
	0x12, 0xe0, 0xa5, 0x4a, 0x5e, 0xcc, 0x52, 0xa1, 0x8e, 0x7a, 0x6f, 0x28, 0x84, 0x5c, 0x81, 0xa8,
	0xf7, 0x2d, 0x4b, 0x91, 0xba, 0x9f, 0x3e, 0xe3, 0x58, 0x98, 0x9c, 0xe7, 0xc6, 0x05, 0xa0, 0xb2,
	0x82, 0xaf, 0xbe, 0xaf, 0x7e, 0x3a, 0xd0, 0x9d, 0x54, 0x5a, 0x3a, 0x9f, 0x11, 0x0a, 0xfb, 0x9a,
	0x2d, 0xa7, 0xd6, 0x44, 0x06, 0xa3, 0xb5, 0x7d, 0x54, 0x45, 0x0b, 0xfc, 0xf8, 0x44, 0x6d, 0xa2,
	0xa3, 0x16, 0xa2, 0x95, 0x2c, 0x34, 0x9e, 0xff, 0x73, 0x8a, 0x67, 0xbb, 0xbf, 0xa9, 0xa8, 0xa2,
	0x56, 0x85, 0x23, 0x41, 0x31, 0x86, 0x3d, 0x9a, 0xa6, 0x4f, 0x4c, 0xbf, 0x93, 0xa8, 0xde, 0x73,
	0xa1, 0x77, 0x1c, 0xb7, 0xb2, 0x60, 0x41, 0x20, 0x13, 0x34, 0xf4, 0x8b, 0x65, 0x82, 0xc5, 0x02,
	0xa9, 0x3d, 0x82, 0x26, 0xc3, 0xfa, 0xd0, 0x26, 0xf7, 0xee, 0xcb, 0x5d, 0xb5, 0xb0, 0x26, 0x86,
	0x03, 0xcb, 0x6d, 0x3c, 0x1b, 0xdf, 0x97, 0x32, 0x5f, 0xe0, 0x2b, 0xb9, 0xf8, 0x3b, 0xde, 0xc0,
	0x7e, 0xc9, 0x70, 0x47, 0x2b, 0xec, 0x78, 0x80, 0xee, 0x14, 0x59, 0x69, 0x6e, 0x91, 0x19, 0x72,
	0xd2, 0xbc, 0xbe, 0x8b, 0xbd, 0xf3, 0x74, 0x0b, 0x0d, 0xae, 0x47, 0x00, 0x9a, 0x24, 0xa8, 0xcc,
	0x1d, 0x13, 0x82, 0x34, 0xea, 0xeb, 0xdc, 0xdb, 0xce, 0xb6, 0xe1, 0xa0, 0xbb, 0x81, 0xce, 0x3c,
	0x2b, 0x38, 0x39, 0xac, 0x37, 0x6d, 0xe2, 0x15, 0x83, 0x4d, 0xe0, 0x87, 0xe3, 0xff, 0xd5, 0x1b,
	0xbc, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xf3, 0x7d, 0x98, 0xd9, 0x02, 0x00, 0x00,
}
