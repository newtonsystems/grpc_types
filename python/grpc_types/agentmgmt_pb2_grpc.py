# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import agentmgmt_pb2 as agentmgmt__pb2


class AgentMgmtStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAvailableAgents = channel.unary_unary(
        '/grpc_types.AgentMgmt/GetAvailableAgents',
        request_serializer=agentmgmt__pb2.GetAvailableAgentsRequest.SerializeToString,
        response_deserializer=agentmgmt__pb2.GetAvailableAgentsResponse.FromString,
        )


class AgentMgmtServicer(object):

  def GetAvailableAgents(self, request, context):
    """AgentMgmt service // Go uses CamelCase so use it for API calls
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AgentMgmtServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAvailableAgents': grpc.unary_unary_rpc_method_handler(
          servicer.GetAvailableAgents,
          request_deserializer=agentmgmt__pb2.GetAvailableAgentsRequest.FromString,
          response_serializer=agentmgmt__pb2.GetAvailableAgentsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc_types.AgentMgmt', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
